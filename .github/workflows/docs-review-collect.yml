name: Add docs-reviewers request to the docs-content review board

# **What it does**: Adds PRs in github/github and github/audit-log-allowlists that requested a review from docs-reviewers to the docs-content review board
# **Why we have it**: To catch docs-reviewers requests in github/audit-log-allowlists
# **Who does it impact**: docs-content maintainers

on:
  workflow_dispatch:
  schedule:
    - cron: '20 */6 * * *' # Run every 6 hours at 20 minutes after

permissions:
  contents: read

jobs:
  add-requests-to-board:
    name: Add requests to board
    if: ${{ github.repository == 'github/docs-internal' }}
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo content
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version-file: 'package.json'
          cache: npm

      - name: Install dependencies
        run: npm install @octokit/graphql

      - name: Run script for audit-log-allowlists
        run: |
          npm run fr-add-docs-reviewers-requests
        env:
          TOKEN: ${{ secrets.DOCS_BOT_PAT_WRITEORG_PROJECT }}
          PROJECT_NUMBER: 2936
          ORGANIZATION: 'github'
          REPO: 'audit-log-allowlists'
          REVIEWER: 'docs-reviewers'
          FEATURE: 'Audit log event descriptions'

      - uses: ./.github/actions/slack-alert
        if: ${{ failure() && github.event_name != 'workflow_dispatch' }}
        with:
          slack_channel_id: ${{ secrets.DOCS_ALERTS_SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_DOCS_BOT_TOKEN }}
by @tr4200812[github.com/tr4200812/hubhub


Featured Actions

Setup a Node.js environment by adding problem matchers and optionally downloading and adding it to the PATH

 4.1k

Upload a build artifact that can be used by subsequent workflow steps

 3.5k

Set up a specific version of the Java JDK and add the command-line tools to the PATH

 1.6k

Used to build and publish .NET source. Set up a specific version of the .NET and authentication to private NuGet repository

 1k

Greet new contributors when they create their first issue or open their first pull request

 782
Featured categories
Browse all actions on the GitHub Marketplace
Getting started with a workflow
To help you get started, this guide shows you some basic examples. For the full GitHub Actions documentation on workflows, see "Configuring workflows."

Customizing when workflow runs are triggered
Set your workflow to run on push events to the main and release/* branches

on:
  push:
    branches:
    - main
    - release/*
Set your workflow to run on pull_request events that target the main branch

on:
  pull_request:
    branches:
    - main
Set your workflow to run every day of the week from Monday to Friday at 2:00 UTC

on:
  schedule:
  - cron: "0 2 * * 1-5"
For more information, see "Events that trigger workflows."

Manually running a workflow
To manually run a workflow, you can configure your workflow to use the workflow_dispatch event. This enables a "Run workflow" button on the Actions tab.

on:
  workflow_dispatch:
For more information, see "Manually running a workflow."

Running your jobs on different operating systems
GitHub Actions provides hosted runners for Linux, Windows, and macOS.

To set the operating system for your job, specify the operating system using runs-on:

jobs:
  my_job:
    name: deploy to staging
    runs-on: ubuntu-22.04
The available virtual machine types are:

ubuntu-latest, ubuntu-22.04, or ubuntu-20.04
windows-latest, windows-2022, or windows-2019
macos-latest, macos-13, or macos-12
For more information, see "Virtual environments for GitHub Actions."

Using an action
Actions are reusable units of code that can be built and distributed by anyone on GitHub. You can find a variety of actions in GitHub Marketplace, and also in the official Actions repository.

To use an action, you must specify the repository that contains the action. We also recommend that you specify a Git tag to ensure you are using a released version of the action.

- name: Setup Node
  uses: actions/setup-node@v4
  with:
    node-version: '20.x'
For more information, see "Workflow syntax for GitHub Actions."

Running a command
You can run commands on the job's virtual machine.

- name: Install Dependencies
  run: npm install
For more information, see "Workflow syntax for GitHub Actions."

Running a job across a matrix of operating systems and runtime versions
You can automatically run a job across a set of different values, such as different versions of code libraries or operating systems.

For example, this job uses a matrix strategy to run across 3 versions of Node and 3 operating systems:

jobs:
  test:
    name: Test on node ${{ matrix.node_version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node_version: ['18.x', '20.x']
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node_version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node_version }}

    - name: npm install, build and test
      run: |
        npm install
        npm run build --if-present
        npm test
For more information, see "Workflow syntax for GitHub Actions."

Running steps or jobs conditionally
GitHub Actions supports conditions on steps and jobs using data present in your workflow context.

For example, to run a step only as part of a push and not in a pull_request, you can specify a condition in the if: property based on the event name:

steps:
- run: npm publish
  if: github.event_name == 'push'
For more information, see "Contexts and expression syntax for GitHub Actions."datapan.yml
