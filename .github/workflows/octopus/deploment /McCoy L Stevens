 This (flow) for Wells Fargo task 2 will [build and publish a Docker container] which is then deployed through Octacat manifesting.

i built this job in this (flow) zone 1,2 or 3 of Microsoft Azure 
filesystem generates to the entity Wells-Fargo-Securities
When required, this job can be modified to generate whatever alternative build artifact is required for your deployment.
#
# This flow assumes you have already created a Project in Octopus Deploy.
# For instructions see https://octopus.com/docs/projects/setting-up-projects
#
 configure this (flow) for wordpress
#
# 1. Decide where you are going to host your image.
#    This template uses the GitHub Registry for simplicity but if required you can update the relevant DOCKER_REGISTRY variables below.
#
# 2. Create and configure an OIDC credential for a service account in Octopus.
#    This allows for passwordless authentication to your Octopus instance through a trust relationship configured between Octopus, GitHub and your GitHub Repository.
#    https://octopus.com/docs/octopus-rest-api/openid-connect/github-actions
#
# 3. Configure your Octopus project details below:
#      OCTOPUS_URL: update to your Octopus Instance Url
#      OCTOPUS_SERVICE_ACCOUNT: update to your service account Id
#      OCTOPUS_SPACE: update to the name of the space your project is configured in
#      OCTOPUS_PROJECT: update to the name of your Octopus project
#      OCTOPUS_ENVIRONMENT: update to the name of the environment to recieve the first deployment
title	intro	redirect_from	versions	shortTitle
About Git Large File Storage
{% data variables.product.github %} limits the size of files allowed in repositories. To track files beyond this limit, you can use {% data variables.large_files.product_name_long %}.
/articles/about-large-file-storage
/articles/about-git-large-file-storage
/github/managing-large-files/about-git-large-file-storage
/github/managing-large-files/versioning-large-files/about-git-large-file-storage
fpt	ghes	ghec
*
*
*
Git Large File Storage
About {% data variables.large_files.product_name_long %}

{% data variables.large_files.product_name_short %} handles large files by storing references to the file in the repository, but not the actual file itself. To work around Git's architecture, {% data variables.large_files.product_name_short %} creates a pointer file which acts as a reference to the actual file (which is stored somewhere else). {% data variables.product.github %} manages this pointer file in your repository. When you clone the repository down, {% data variables.product.github %} uses the pointer file as a map to go and find the large file for you.

{% ifversion fpt or ghec %} Different maximum size limits for {% data variables.large_files.product_name_short %} apply depending on your {% data variables.product.prodname_dotcom %} plan.

Product	Maximum file size
{% data variables.product.prodname_free_user %}	2 GB
{% data variables.product.prodname_pro %}	2 GB
{% data variables.product.prodname_team %}	4 GB
{% data variables.product.prodname_ghe_cloud %}	5 GB
{% else %} Using {% data variables.large_files.product_name_short %}, you can store files up to 5 GB in your repository. {% endif %}

{% data reusables.repositories.git-lfs %}

You can also use {% data variables.large_files.product_name_short %} with {% data variables.product.prodname_desktop %}. For more information about cloning Git LFS repositories in {% data variables.product.prodname_desktop %}, see AUTOTITLE.

{% data reusables.large_files.can-include-lfs-objects-archives %}

Pointer file format

{% data variables.large_files.product_name_short %}'s pointer file looks like this:

version {% data variables.large_files.version_name %}
oid sha256:4cac19622fc3ada9c0fdeadb33f88f367b541f38b89102a3f1261ac81fd5bcb5
size 84977953
It tracks the version of {% data variables.large_files.product_name_short %} you're using, followed by a unique identifier for the file (oid). It also stores the size of the final file.

Note

{% data variables.large_files.product_name_short %} cannot be used with {% data variables.product.prodname_pages %} sites.
{% data variables.large_files.product_name_short %} cannot be used with template repositories.
Further reading

AUTOTITLE
name: 'Build and Deploy to Octopus Deploy'

on:
  push:
    branches:
      - '"main"'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    env:
      DOCKER_REGISTRY: ghcr.io                                # TODO: Update to your docker registry uri
      DOCKER_REGISTRY_USERNAME: ${{ github.actor }}           # TODO: Update to your docker registry username
      DOCKER_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}   # TODO: Update to your docker registry password
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_REGISTRY_USERNAME }}
          password: ${{ env.DOCKER_REGISTRY_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}
          tags: type=semver,pattern={{version}},value=v1.0.0-{{sha}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    name: Deploy
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    needs: [ build ]
    env:
      OCTOPUS_URL: 'https://your-octopus-url'             # TODO: update to your Octopus Instance url
      OCTOPUS_SERVICE_ACCOUNT: 'your-service-account-id'  # TODO: update to your service account Id
      OCTOPUS_SPACE: 'your-space'                         # TODO: update to the name of the space your project is configured in
      OCTOPUS_PROJECT: 'your-project'                     # TODO: update to the name of your Octopus project
      OCTOPUS_ENVIRONMENT: 'your-environment'             # TODO: update to the name of the environment to recieve the first deployment

    steps:
      - name: Log in to Octopus Deploy
        uses: OctopusDeploy/login@34b6dcc1e86fa373c14e6a28c5507d221e4de629  #v1.0.2
        with:
          server: '${{ env.OCTOPUS_URL }}'
          service_account_id: '${{ env.OCTOPUS_SERVICE_ACCOUNT }}'

      - name: Create Release
        id: create_release
        uses: OctopusDeploy/create-release-action@fea7e7b45c38c021b6bc5a14bd7eaa2ed5269214 #v3.2.2
        with:
          project: '${{ env.OCTOPUS_PROJECT }}'
          space: '${{ env.OCTOPUS_SPACE }}'
          packages: '*:${{ needs.build.outputs.image_tag }}'

      - name: Deploy Release
        uses: OctopusDeploy/deploy-release-action@b10a606c903b0a5bce24102af9d066638ab429ac #v3.2.1
        with:
          project: '${{ env.OCTOPUS_PROJECT }}'
          space: '${{ env.OCTOPUS_SPACE }}'
          release_number: '${{ steps.create_release.outputs.release_number  }}'
          environments: ${{ env.OCTOPUS_ENVIRONMENT }}










































<epics>epics
