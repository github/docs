import { addError } from 'markdownlint-rule-helpers'
import { getRange } from '../helpers/utils.js'
import frontmatter from '#src/frame/lib/read-frontmatter.js'

export const britishEnglishQuotes = {
  names: ['GHD048', 'british-english-quotes'],
  description:
    'Periods and commas should be placed inside quotation marks (American English style)',
  tags: ['punctuation', 'quotes', 'style', 'consistency'],
  severity: 'warning', // Non-blocking as requested in the issue
  function: (params, onError) => {
    // Skip autogenerated files
    const frontmatterString = params.frontMatterLines.join('\n')
    const fm = frontmatter(frontmatterString).data
    if (fm && fm.autogenerated) return

    // Check each line for British English quote patterns
    for (let i = 0; i < params.lines.length; i++) {
      const line = params.lines[i]
      const lineNumber = i + 1

      // Skip code blocks, code spans, and URLs
      if (isInCodeContext(line, params.lines, i)) {
        continue
      }

      // Find British English quote patterns and report them
      findAndReportBritishQuotes(line, lineNumber, onError)
    }
  },
}

/**
 * Check if the current position is within a code context (code blocks, inline code, URLs)
 */
function isInCodeContext(line, allLines, lineIndex) {
  // Skip if line contains code fences
  if (line.includes('```') || line.includes('~~~')) {
    return true
  }

  // Check if we're inside a code block
  let inCodeBlock = false
  for (let i = 0; i < lineIndex; i++) {
    if (allLines[i].includes('```') || allLines[i].includes('~~~')) {
      inCodeBlock = !inCodeBlock
    }
  }
  if (inCodeBlock) {
    return true
  }

  // Skip if line appears to be mostly code (has multiple backticks)
  const backtickCount = (line.match(/`/g) || []).length
  if (backtickCount >= 4) {
    return true
  }

  // Skip URLs and email addresses
  if (line.includes('http://') || line.includes('https://') || line.includes('mailto:')) {
    return true
  }

  return false
}

/**
 * Find and report British English quote patterns in a line
 */
function findAndReportBritishQuotes(line, lineNumber, onError) {
  // Pattern to find quote followed by punctuation outside
  // Matches: "text". or 'text', or "text",  etc.
  const britishPattern = /(["'])([^"']*?)\1\s*([.,])/g

  let match
  while ((match = britishPattern.exec(line)) !== null) {
    const quoteChar = match[1]
    const quotedText = match[2]
    const punctuation = match[3]
    const fullMatch = match[0]
    const startIndex = match.index

    // Create the corrected version (punctuation inside quotes)
    const correctedText = quoteChar + quotedText + punctuation + quoteChar

    const range = getRange(line, fullMatch)
    const punctuationName = punctuation === '.' ? 'period' : 'comma'
    const errorMessage = `Use American English punctuation: place ${punctuationName} inside the quotation marks`

    // Provide auto-fix
    const fixInfo = {
      editColumn: startIndex + 1,
      deleteCount: fullMatch.length,
      insertText: correctedText,
    }

    addError(onError, lineNumber, errorMessage, line, range, fixInfo)
  }
}
